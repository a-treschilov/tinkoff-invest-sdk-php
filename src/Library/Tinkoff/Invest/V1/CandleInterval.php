<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: marketdata.proto

namespace Tinkoff\Invest\V1;

use UnexpectedValueException;

/**
 *Интервал свечей.
 *
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.CandleInterval</code>
 */
class CandleInterval
{
    /**
     *Интервал не определён.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_UNSPECIFIED = 0;</code>
     */
    const CANDLE_INTERVAL_UNSPECIFIED = 0;
    /**
     *от 1 минуты до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_1_MIN = 1;</code>
     */
    const CANDLE_INTERVAL_1_MIN = 1;
    /**
     *от 5 минут до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_5_MIN = 2;</code>
     */
    const CANDLE_INTERVAL_5_MIN = 2;
    /**
     *от 15 минут до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_15_MIN = 3;</code>
     */
    const CANDLE_INTERVAL_15_MIN = 3;
    /**
     *от 1 часа до 1 недели.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_HOUR = 4;</code>
     */
    const CANDLE_INTERVAL_HOUR = 4;
    /**
     *от 1 дня до 1 года.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_DAY = 5;</code>
     */
    const CANDLE_INTERVAL_DAY = 5;
    /**
     *от 2 минут до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_2_MIN = 6;</code>
     */
    const CANDLE_INTERVAL_2_MIN = 6;
    /**
     *от 3 минут до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_3_MIN = 7;</code>
     */
    const CANDLE_INTERVAL_3_MIN = 7;
    /**
     *от 10 минут до 1 дня.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_10_MIN = 8;</code>
     */
    const CANDLE_INTERVAL_10_MIN = 8;
    /**
     *от 30 минут до 2 дней.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_30_MIN = 9;</code>
     */
    const CANDLE_INTERVAL_30_MIN = 9;
    /**
     *от 2 часов до 1 месяца.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_2_HOUR = 10;</code>
     */
    const CANDLE_INTERVAL_2_HOUR = 10;
    /**
     *от 4 часов до 1 месяца.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_4_HOUR = 11;</code>
     */
    const CANDLE_INTERVAL_4_HOUR = 11;
    /**
     *от 1 недели до 2 лет.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_WEEK = 12;</code>
     */
    const CANDLE_INTERVAL_WEEK = 12;
    /**
     *от 1 месяца до 10 лет.
     *
     * Generated from protobuf enum <code>CANDLE_INTERVAL_MONTH = 13;</code>
     */
    const CANDLE_INTERVAL_MONTH = 13;

    private static $valueToName = [
        self::CANDLE_INTERVAL_UNSPECIFIED => 'CANDLE_INTERVAL_UNSPECIFIED',
        self::CANDLE_INTERVAL_1_MIN => 'CANDLE_INTERVAL_1_MIN',
        self::CANDLE_INTERVAL_5_MIN => 'CANDLE_INTERVAL_5_MIN',
        self::CANDLE_INTERVAL_15_MIN => 'CANDLE_INTERVAL_15_MIN',
        self::CANDLE_INTERVAL_HOUR => 'CANDLE_INTERVAL_HOUR',
        self::CANDLE_INTERVAL_DAY => 'CANDLE_INTERVAL_DAY',
        self::CANDLE_INTERVAL_2_MIN => 'CANDLE_INTERVAL_2_MIN',
        self::CANDLE_INTERVAL_3_MIN => 'CANDLE_INTERVAL_3_MIN',
        self::CANDLE_INTERVAL_10_MIN => 'CANDLE_INTERVAL_10_MIN',
        self::CANDLE_INTERVAL_30_MIN => 'CANDLE_INTERVAL_30_MIN',
        self::CANDLE_INTERVAL_2_HOUR => 'CANDLE_INTERVAL_2_HOUR',
        self::CANDLE_INTERVAL_4_HOUR => 'CANDLE_INTERVAL_4_HOUR',
        self::CANDLE_INTERVAL_WEEK => 'CANDLE_INTERVAL_WEEK',
        self::CANDLE_INTERVAL_MONTH => 'CANDLE_INTERVAL_MONTH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

