<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: instruments.proto

namespace Tinkoff\Invest\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *Опцион.
 *
 * Generated from protobuf message <code>tinkoff.public.invest.api.contract.v1.Option</code>
 */
class Option extends \Google\Protobuf\Internal\Message
{
    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     */
    protected $uid = '';
    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 2;</code>
     */
    protected $position_uid = '';
    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     */
    protected $ticker = '';
    /**
     *Класс-код.
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     */
    protected $class_code = '';
    /**
     *Уникальный идентификатор позиции основного инструмента.
     *
     * Generated from protobuf field <code>string basic_asset_position_uid = 5;</code>
     */
    protected $basic_asset_position_uid = '';
    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;</code>
     */
    protected $trading_status = 0;
    /**
     *Реальная площадка исполнения расчётов (биржа).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;</code>
     */
    protected $real_exchange = 0;
    /**
     *Направление опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;</code>
     */
    protected $direction = 0;
    /**
     *Тип расчётов по опциону.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;</code>
     */
    protected $payment_type = 0;
    /**
     *Стиль опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;</code>
     */
    protected $style = 0;
    /**
     *Способ исполнения опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;</code>
     */
    protected $settlement_type = 0;
    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 101;</code>
     */
    protected $name = '';
    /**
     *Валюта.
     *
     * Generated from protobuf field <code>string currency = 111;</code>
     */
    protected $currency = '';
    /**
     *Валюта, в которой оценивается контракт.
     *
     * Generated from protobuf field <code>string settlement_currency = 112;</code>
     */
    protected $settlement_currency = '';
    /**
     *Тип актива.
     *
     * Generated from protobuf field <code>string asset_type = 131;</code>
     */
    protected $asset_type = '';
    /**
     *Основной актив.
     *
     * Generated from protobuf field <code>string basic_asset = 132;</code>
     */
    protected $basic_asset = '';
    /**
     * Tорговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 141;</code>
     */
    protected $exchange = '';
    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 151;</code>
     */
    protected $country_of_risk = '';
    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 152;</code>
     */
    protected $country_of_risk_name = '';
    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 161;</code>
     */
    protected $sector = '';
    /**
     * Информация о бренде.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.BrandData brand = 162;</code>
     */
    protected $brand = null;
    /**
     *Количество бумаг в лоте.
     *
     * Generated from protobuf field <code>int32 lot = 201;</code>
     */
    protected $lot = 0;
    /**
     *Размер основного актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;</code>
     */
    protected $basic_asset_size = null;
    /**
     *Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation klong = 221;</code>
     */
    protected $klong = null;
    /**
     *Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;</code>
     */
    protected $kshort = null;
    /**
     *Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong = 223 [deprecated = true];</code>
     * @deprecated
     */
    protected $dlong = null;
    /**
     *Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort = 224 [deprecated = true];</code>
     * @deprecated
     */
    protected $dshort = null;
    /**
     *Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225 [deprecated = true];</code>
     * @deprecated
     */
    protected $dlong_min = null;
    /**
     *Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226 [deprecated = true];</code>
     * @deprecated
     */
    protected $dshort_min = null;
    /**
     *Минимальный шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;</code>
     */
    protected $min_price_increment = null;
    /**
     *Цена страйка.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;</code>
     */
    protected $strike_price = null;
    /**
     *Ставка риска в лонг, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;</code>
     */
    protected $dlong_client = null;
    /**
     *Ставка риска в шорт, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;</code>
     */
    protected $dshort_client = null;
    /**
     *Дата истечения срока в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiration_date = 301;</code>
     */
    protected $expiration_date = null;
    /**
     *Дата начала обращения контракта в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_trade_date = 311;</code>
     */
    protected $first_trade_date = null;
    /**
     *Дата исполнения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_trade_date = 312;</code>
     */
    protected $last_trade_date = null;
    /**
     *Дата первой минутной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 321;</code>
     */
    protected $first_1min_candle_date = null;
    /**
     *Дата первой дневной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 322;</code>
     */
    protected $first_1day_candle_date = null;
    /**
     *Признак доступности для операций шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 401;</code>
     */
    protected $short_enabled_flag = false;
    /**
     *Возможность покупки или продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 402;</code>
     */
    protected $for_iis_flag = false;
    /**
     *Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
     *
     * Generated from protobuf field <code>bool otc_flag = 403;</code>
     */
    protected $otc_flag = false;
    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 404;</code>
     */
    protected $buy_available_flag = false;
    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 405;</code>
     */
    protected $sell_available_flag = false;
    /**
     *Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 406;</code>
     */
    protected $for_qual_investor_flag = false;
    /**
     *Флаг, отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 407;</code>
     */
    protected $weekend_flag = false;
    /**
     *Флаг заблокированного ТКС.
     *
     * Generated from protobuf field <code>bool blocked_tca_flag = 408;</code>
     */
    protected $blocked_tca_flag = false;
    /**
     *Возможность торговать инструментом через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 409;</code>
     */
    protected $api_trade_available_flag = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $uid
     *          Уникальный идентификатор инструмента.
     *     @type string $position_uid
     *          Уникальный идентификатор позиции.
     *     @type string $ticker
     *          Тикер инструмента.
     *     @type string $class_code
     *          Класс-код.
     *     @type string $basic_asset_position_uid
     *          Уникальный идентификатор позиции основного инструмента.
     *     @type int $trading_status
     *          Текущий режим торгов инструмента.
     *     @type int $real_exchange
     *          Реальная площадка исполнения расчётов (биржа).
     *     @type int $direction
     *          Направление опциона.
     *     @type int $payment_type
     *          Тип расчётов по опциону.
     *     @type int $style
     *          Стиль опциона.
     *     @type int $settlement_type
     *          Способ исполнения опциона.
     *     @type string $name
     *          Название инструмента.
     *     @type string $currency
     *          Валюта.
     *     @type string $settlement_currency
     *          Валюта, в которой оценивается контракт.
     *     @type string $asset_type
     *          Тип актива.
     *     @type string $basic_asset
     *          Основной актив.
     *     @type string $exchange
     *           Tорговая площадка (секция биржи).
     *     @type string $country_of_risk
     *          Код страны рисков.
     *     @type string $country_of_risk_name
     *          Наименование страны рисков.
     *     @type string $sector
     *          Сектор экономики.
     *     @type \Tinkoff\Invest\V1\BrandData $brand
     *           Информация о бренде.
     *     @type int $lot
     *          Количество бумаг в лоте.
     *     @type \Tinkoff\Invest\V1\Quotation $basic_asset_size
     *          Размер основного актива.
     *     @type \Tinkoff\Invest\V1\Quotation $klong
     *          Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *     @type \Tinkoff\Invest\V1\Quotation $kshort
     *          Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *     @type \Tinkoff\Invest\V1\Quotation $dlong
     *          Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Tinkoff\Invest\V1\Quotation $dshort
     *          Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Tinkoff\Invest\V1\Quotation $dlong_min
     *          Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Tinkoff\Invest\V1\Quotation $dshort_min
     *          Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Tinkoff\Invest\V1\Quotation $min_price_increment
     *          Минимальный шаг цены.
     *     @type \Tinkoff\Invest\V1\MoneyValue $strike_price
     *          Цена страйка.
     *     @type \Tinkoff\Invest\V1\Quotation $dlong_client
     *          Ставка риска в лонг, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Tinkoff\Invest\V1\Quotation $dshort_client
     *          Ставка риска в шорт, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *     @type \Google\Protobuf\Timestamp $expiration_date
     *          Дата истечения срока в формате UTC.
     *     @type \Google\Protobuf\Timestamp $first_trade_date
     *          Дата начала обращения контракта в формате UTC.
     *     @type \Google\Protobuf\Timestamp $last_trade_date
     *          Дата исполнения в формате UTC.
     *     @type \Google\Protobuf\Timestamp $first_1min_candle_date
     *          Дата первой минутной свечи в формате UTC.
     *     @type \Google\Protobuf\Timestamp $first_1day_candle_date
     *          Дата первой дневной свечи в формате UTC.
     *     @type bool $short_enabled_flag
     *          Признак доступности для операций шорт.
     *     @type bool $for_iis_flag
     *          Возможность покупки или продажи на ИИС.
     *     @type bool $otc_flag
     *          Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
     *     @type bool $buy_available_flag
     *          Признак доступности для покупки.
     *     @type bool $sell_available_flag
     *          Признак доступности для продажи.
     *     @type bool $for_qual_investor_flag
     *          Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *     @type bool $weekend_flag
     *          Флаг, отображающий доступность торговли инструментом по выходным.
     *     @type bool $blocked_tca_flag
     *          Флаг заблокированного ТКС.
     *     @type bool $api_trade_available_flag
     *          Возможность торговать инструментом через API.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Instruments::initOnce();
        parent::__construct($data);
    }

    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }

    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uid = $var;

        return $this;
    }

    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 2;</code>
     * @return string
     */
    public function getPositionUid()
    {
        return $this->position_uid;
    }

    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPositionUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->position_uid = $var;

        return $this;
    }

    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     * @return string
     */
    public function getTicker()
    {
        return $this->ticker;
    }

    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTicker($var)
    {
        GPBUtil::checkString($var, True);
        $this->ticker = $var;

        return $this;
    }

    /**
     *Класс-код.
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     * @return string
     */
    public function getClassCode()
    {
        return $this->class_code;
    }

    /**
     *Класс-код.
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setClassCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->class_code = $var;

        return $this;
    }

    /**
     *Уникальный идентификатор позиции основного инструмента.
     *
     * Generated from protobuf field <code>string basic_asset_position_uid = 5;</code>
     * @return string
     */
    public function getBasicAssetPositionUid()
    {
        return $this->basic_asset_position_uid;
    }

    /**
     *Уникальный идентификатор позиции основного инструмента.
     *
     * Generated from protobuf field <code>string basic_asset_position_uid = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setBasicAssetPositionUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->basic_asset_position_uid = $var;

        return $this;
    }

    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;</code>
     * @return int
     */
    public function getTradingStatus()
    {
        return $this->trading_status;
    }

    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;</code>
     * @param int $var
     * @return $this
     */
    public function setTradingStatus($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\SecurityTradingStatus::class);
        $this->trading_status = $var;

        return $this;
    }

    /**
     *Реальная площадка исполнения расчётов (биржа).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;</code>
     * @return int
     */
    public function getRealExchange()
    {
        return $this->real_exchange;
    }

    /**
     *Реальная площадка исполнения расчётов (биржа).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;</code>
     * @param int $var
     * @return $this
     */
    public function setRealExchange($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\RealExchange::class);
        $this->real_exchange = $var;

        return $this;
    }

    /**
     *Направление опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;</code>
     * @return int
     */
    public function getDirection()
    {
        return $this->direction;
    }

    /**
     *Направление опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;</code>
     * @param int $var
     * @return $this
     */
    public function setDirection($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\OptionDirection::class);
        $this->direction = $var;

        return $this;
    }

    /**
     *Тип расчётов по опциону.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;</code>
     * @return int
     */
    public function getPaymentType()
    {
        return $this->payment_type;
    }

    /**
     *Тип расчётов по опциону.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;</code>
     * @param int $var
     * @return $this
     */
    public function setPaymentType($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\OptionPaymentType::class);
        $this->payment_type = $var;

        return $this;
    }

    /**
     *Стиль опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;</code>
     * @return int
     */
    public function getStyle()
    {
        return $this->style;
    }

    /**
     *Стиль опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;</code>
     * @param int $var
     * @return $this
     */
    public function setStyle($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\OptionStyle::class);
        $this->style = $var;

        return $this;
    }

    /**
     *Способ исполнения опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;</code>
     * @return int
     */
    public function getSettlementType()
    {
        return $this->settlement_type;
    }

    /**
     *Способ исполнения опциона.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;</code>
     * @param int $var
     * @return $this
     */
    public function setSettlementType($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\OptionSettlementType::class);
        $this->settlement_type = $var;

        return $this;
    }

    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 101;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 101;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *Валюта.
     *
     * Generated from protobuf field <code>string currency = 111;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     *Валюта.
     *
     * Generated from protobuf field <code>string currency = 111;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     *Валюта, в которой оценивается контракт.
     *
     * Generated from protobuf field <code>string settlement_currency = 112;</code>
     * @return string
     */
    public function getSettlementCurrency()
    {
        return $this->settlement_currency;
    }

    /**
     *Валюта, в которой оценивается контракт.
     *
     * Generated from protobuf field <code>string settlement_currency = 112;</code>
     * @param string $var
     * @return $this
     */
    public function setSettlementCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->settlement_currency = $var;

        return $this;
    }

    /**
     *Тип актива.
     *
     * Generated from protobuf field <code>string asset_type = 131;</code>
     * @return string
     */
    public function getAssetType()
    {
        return $this->asset_type;
    }

    /**
     *Тип актива.
     *
     * Generated from protobuf field <code>string asset_type = 131;</code>
     * @param string $var
     * @return $this
     */
    public function setAssetType($var)
    {
        GPBUtil::checkString($var, True);
        $this->asset_type = $var;

        return $this;
    }

    /**
     *Основной актив.
     *
     * Generated from protobuf field <code>string basic_asset = 132;</code>
     * @return string
     */
    public function getBasicAsset()
    {
        return $this->basic_asset;
    }

    /**
     *Основной актив.
     *
     * Generated from protobuf field <code>string basic_asset = 132;</code>
     * @param string $var
     * @return $this
     */
    public function setBasicAsset($var)
    {
        GPBUtil::checkString($var, True);
        $this->basic_asset = $var;

        return $this;
    }

    /**
     * Tорговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 141;</code>
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * Tорговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 141;</code>
     * @param string $var
     * @return $this
     */
    public function setExchange($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange = $var;

        return $this;
    }

    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 151;</code>
     * @return string
     */
    public function getCountryOfRisk()
    {
        return $this->country_of_risk;
    }

    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 151;</code>
     * @param string $var
     * @return $this
     */
    public function setCountryOfRisk($var)
    {
        GPBUtil::checkString($var, True);
        $this->country_of_risk = $var;

        return $this;
    }

    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 152;</code>
     * @return string
     */
    public function getCountryOfRiskName()
    {
        return $this->country_of_risk_name;
    }

    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 152;</code>
     * @param string $var
     * @return $this
     */
    public function setCountryOfRiskName($var)
    {
        GPBUtil::checkString($var, True);
        $this->country_of_risk_name = $var;

        return $this;
    }

    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 161;</code>
     * @return string
     */
    public function getSector()
    {
        return $this->sector;
    }

    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 161;</code>
     * @param string $var
     * @return $this
     */
    public function setSector($var)
    {
        GPBUtil::checkString($var, True);
        $this->sector = $var;

        return $this;
    }

    /**
     * Информация о бренде.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.BrandData brand = 162;</code>
     * @return \Tinkoff\Invest\V1\BrandData|null
     */
    public function getBrand()
    {
        return $this->brand;
    }

    public function hasBrand()
    {
        return isset($this->brand);
    }

    public function clearBrand()
    {
        unset($this->brand);
    }

    /**
     * Информация о бренде.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.BrandData brand = 162;</code>
     * @param \Tinkoff\Invest\V1\BrandData $var
     * @return $this
     */
    public function setBrand($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\BrandData::class);
        $this->brand = $var;

        return $this;
    }

    /**
     *Количество бумаг в лоте.
     *
     * Generated from protobuf field <code>int32 lot = 201;</code>
     * @return int
     */
    public function getLot()
    {
        return $this->lot;
    }

    /**
     *Количество бумаг в лоте.
     *
     * Generated from protobuf field <code>int32 lot = 201;</code>
     * @param int $var
     * @return $this
     */
    public function setLot($var)
    {
        GPBUtil::checkInt32($var);
        $this->lot = $var;

        return $this;
    }

    /**
     *Размер основного актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getBasicAssetSize()
    {
        return $this->basic_asset_size;
    }

    public function hasBasicAssetSize()
    {
        return isset($this->basic_asset_size);
    }

    public function clearBasicAssetSize()
    {
        unset($this->basic_asset_size);
    }

    /**
     *Размер основного актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setBasicAssetSize($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->basic_asset_size = $var;

        return $this;
    }

    /**
     *Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation klong = 221;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getKlong()
    {
        return $this->klong;
    }

    public function hasKlong()
    {
        return isset($this->klong);
    }

    public function clearKlong()
    {
        unset($this->klong);
    }

    /**
     *Коэффициент ставки риска длинной позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation klong = 221;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setKlong($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->klong = $var;

        return $this;
    }

    /**
     *Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getKshort()
    {
        return $this->kshort;
    }

    public function hasKshort()
    {
        return isset($this->kshort);
    }

    public function clearKshort()
    {
        unset($this->kshort);
    }

    /**
     *Коэффициент ставки риска короткой позиции по клиенту. 2 – клиент со стандартным уровнем риска (КСУР); 1 – клиент с повышенным уровнем риска (КПУР).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setKshort($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->kshort = $var;

        return $this;
    }

    /**
     *Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong = 223 [deprecated = true];</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     * @deprecated
     */
    public function getDlong()
    {
        @trigger_error('dlong is deprecated.', E_USER_DEPRECATED);
        return $this->dlong;
    }

    public function hasDlong()
    {
        @trigger_error('dlong is deprecated.', E_USER_DEPRECATED);
        return isset($this->dlong);
    }

    public function clearDlong()
    {
        @trigger_error('dlong is deprecated.', E_USER_DEPRECATED);
        unset($this->dlong);
    }

    /**
     *Ставка риска начальной маржи для КСУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong = 223 [deprecated = true];</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     * @deprecated
     */
    public function setDlong($var)
    {
        @trigger_error('dlong is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dlong = $var;

        return $this;
    }

    /**
     *Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort = 224 [deprecated = true];</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     * @deprecated
     */
    public function getDshort()
    {
        @trigger_error('dshort is deprecated.', E_USER_DEPRECATED);
        return $this->dshort;
    }

    public function hasDshort()
    {
        @trigger_error('dshort is deprecated.', E_USER_DEPRECATED);
        return isset($this->dshort);
    }

    public function clearDshort()
    {
        @trigger_error('dshort is deprecated.', E_USER_DEPRECATED);
        unset($this->dshort);
    }

    /**
     *Ставка риска начальной маржи для КСУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort = 224 [deprecated = true];</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     * @deprecated
     */
    public function setDshort($var)
    {
        @trigger_error('dshort is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dshort = $var;

        return $this;
    }

    /**
     *Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225 [deprecated = true];</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     * @deprecated
     */
    public function getDlongMin()
    {
        @trigger_error('dlong_min is deprecated.', E_USER_DEPRECATED);
        return $this->dlong_min;
    }

    public function hasDlongMin()
    {
        @trigger_error('dlong_min is deprecated.', E_USER_DEPRECATED);
        return isset($this->dlong_min);
    }

    public function clearDlongMin()
    {
        @trigger_error('dlong_min is deprecated.', E_USER_DEPRECATED);
        unset($this->dlong_min);
    }

    /**
     *Ставка риска начальной маржи для КПУР лонг. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225 [deprecated = true];</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     * @deprecated
     */
    public function setDlongMin($var)
    {
        @trigger_error('dlong_min is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dlong_min = $var;

        return $this;
    }

    /**
     *Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226 [deprecated = true];</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     * @deprecated
     */
    public function getDshortMin()
    {
        @trigger_error('dshort_min is deprecated.', E_USER_DEPRECATED);
        return $this->dshort_min;
    }

    public function hasDshortMin()
    {
        @trigger_error('dshort_min is deprecated.', E_USER_DEPRECATED);
        return isset($this->dshort_min);
    }

    public function clearDshortMin()
    {
        @trigger_error('dshort_min is deprecated.', E_USER_DEPRECATED);
        unset($this->dshort_min);
    }

    /**
     *Ставка риска начальной маржи для КПУР шорт. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226 [deprecated = true];</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     * @deprecated
     */
    public function setDshortMin($var)
    {
        @trigger_error('dshort_min is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dshort_min = $var;

        return $this;
    }

    /**
     *Минимальный шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getMinPriceIncrement()
    {
        return $this->min_price_increment;
    }

    public function hasMinPriceIncrement()
    {
        return isset($this->min_price_increment);
    }

    public function clearMinPriceIncrement()
    {
        unset($this->min_price_increment);
    }

    /**
     *Минимальный шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setMinPriceIncrement($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->min_price_increment = $var;

        return $this;
    }

    /**
     *Цена страйка.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;</code>
     * @return \Tinkoff\Invest\V1\MoneyValue|null
     */
    public function getStrikePrice()
    {
        return $this->strike_price;
    }

    public function hasStrikePrice()
    {
        return isset($this->strike_price);
    }

    public function clearStrikePrice()
    {
        unset($this->strike_price);
    }

    /**
     *Цена страйка.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;</code>
     * @param \Tinkoff\Invest\V1\MoneyValue $var
     * @return $this
     */
    public function setStrikePrice($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\MoneyValue::class);
        $this->strike_price = $var;

        return $this;
    }

    /**
     *Ставка риска в лонг, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getDlongClient()
    {
        return $this->dlong_client;
    }

    public function hasDlongClient()
    {
        return isset($this->dlong_client);
    }

    public function clearDlongClient()
    {
        unset($this->dlong_client);
    }

    /**
     *Ставка риска в лонг, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setDlongClient($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dlong_client = $var;

        return $this;
    }

    /**
     *Ставка риска в шорт, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getDshortClient()
    {
        return $this->dshort_client;
    }

    public function hasDshortClient()
    {
        return isset($this->dshort_client);
    }

    public function clearDshortClient()
    {
        unset($this->dshort_client);
    }

    /**
     *Ставка риска в шорт, с учетом текущего уровня риска портфеля клиента. [Подробнее про ставки риска](https://www.tbank.ru/invest/help/brokerage/account/margin/about/#q5).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setDshortClient($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dshort_client = $var;

        return $this;
    }

    /**
     *Дата истечения срока в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiration_date = 301;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getExpirationDate()
    {
        return $this->expiration_date;
    }

    public function hasExpirationDate()
    {
        return isset($this->expiration_date);
    }

    public function clearExpirationDate()
    {
        unset($this->expiration_date);
    }

    /**
     *Дата истечения срока в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiration_date = 301;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExpirationDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->expiration_date = $var;

        return $this;
    }

    /**
     *Дата начала обращения контракта в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_trade_date = 311;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFirstTradeDate()
    {
        return $this->first_trade_date;
    }

    public function hasFirstTradeDate()
    {
        return isset($this->first_trade_date);
    }

    public function clearFirstTradeDate()
    {
        unset($this->first_trade_date);
    }

    /**
     *Дата начала обращения контракта в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_trade_date = 311;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFirstTradeDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->first_trade_date = $var;

        return $this;
    }

    /**
     *Дата исполнения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_trade_date = 312;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getLastTradeDate()
    {
        return $this->last_trade_date;
    }

    public function hasLastTradeDate()
    {
        return isset($this->last_trade_date);
    }

    public function clearLastTradeDate()
    {
        unset($this->last_trade_date);
    }

    /**
     *Дата исполнения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_trade_date = 312;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setLastTradeDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->last_trade_date = $var;

        return $this;
    }

    /**
     *Дата первой минутной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 321;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFirst1MinCandleDate()
    {
        return $this->first_1min_candle_date;
    }

    public function hasFirst1MinCandleDate()
    {
        return isset($this->first_1min_candle_date);
    }

    public function clearFirst1MinCandleDate()
    {
        unset($this->first_1min_candle_date);
    }

    /**
     *Дата первой минутной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 321;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFirst1MinCandleDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->first_1min_candle_date = $var;

        return $this;
    }

    /**
     *Дата первой дневной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 322;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFirst1DayCandleDate()
    {
        return $this->first_1day_candle_date;
    }

    public function hasFirst1DayCandleDate()
    {
        return isset($this->first_1day_candle_date);
    }

    public function clearFirst1DayCandleDate()
    {
        unset($this->first_1day_candle_date);
    }

    /**
     *Дата первой дневной свечи в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 322;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFirst1DayCandleDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->first_1day_candle_date = $var;

        return $this;
    }

    /**
     *Признак доступности для операций шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 401;</code>
     * @return bool
     */
    public function getShortEnabledFlag()
    {
        return $this->short_enabled_flag;
    }

    /**
     *Признак доступности для операций шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 401;</code>
     * @param bool $var
     * @return $this
     */
    public function setShortEnabledFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->short_enabled_flag = $var;

        return $this;
    }

    /**
     *Возможность покупки или продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 402;</code>
     * @return bool
     */
    public function getForIisFlag()
    {
        return $this->for_iis_flag;
    }

    /**
     *Возможность покупки или продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 402;</code>
     * @param bool $var
     * @return $this
     */
    public function setForIisFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->for_iis_flag = $var;

        return $this;
    }

    /**
     *Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
     *
     * Generated from protobuf field <code>bool otc_flag = 403;</code>
     * @return bool
     */
    public function getOtcFlag()
    {
        return $this->otc_flag;
    }

    /**
     *Флаг, используемый ранее для определения внебиржевых инструментов. На данный момент не используется для торгуемых через API инструментов. Может использоваться как фильтр для операций, совершавшихся некоторое время назад на ОТС площадке.
     *
     * Generated from protobuf field <code>bool otc_flag = 403;</code>
     * @param bool $var
     * @return $this
     */
    public function setOtcFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->otc_flag = $var;

        return $this;
    }

    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 404;</code>
     * @return bool
     */
    public function getBuyAvailableFlag()
    {
        return $this->buy_available_flag;
    }

    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 404;</code>
     * @param bool $var
     * @return $this
     */
    public function setBuyAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->buy_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 405;</code>
     * @return bool
     */
    public function getSellAvailableFlag()
    {
        return $this->sell_available_flag;
    }

    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 405;</code>
     * @param bool $var
     * @return $this
     */
    public function setSellAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->sell_available_flag = $var;

        return $this;
    }

    /**
     *Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 406;</code>
     * @return bool
     */
    public function getForQualInvestorFlag()
    {
        return $this->for_qual_investor_flag;
    }

    /**
     *Флаг, отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 406;</code>
     * @param bool $var
     * @return $this
     */
    public function setForQualInvestorFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->for_qual_investor_flag = $var;

        return $this;
    }

    /**
     *Флаг, отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 407;</code>
     * @return bool
     */
    public function getWeekendFlag()
    {
        return $this->weekend_flag;
    }

    /**
     *Флаг, отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 407;</code>
     * @param bool $var
     * @return $this
     */
    public function setWeekendFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->weekend_flag = $var;

        return $this;
    }

    /**
     *Флаг заблокированного ТКС.
     *
     * Generated from protobuf field <code>bool blocked_tca_flag = 408;</code>
     * @return bool
     */
    public function getBlockedTcaFlag()
    {
        return $this->blocked_tca_flag;
    }

    /**
     *Флаг заблокированного ТКС.
     *
     * Generated from protobuf field <code>bool blocked_tca_flag = 408;</code>
     * @param bool $var
     * @return $this
     */
    public function setBlockedTcaFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->blocked_tca_flag = $var;

        return $this;
    }

    /**
     *Возможность торговать инструментом через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 409;</code>
     * @return bool
     */
    public function getApiTradeAvailableFlag()
    {
        return $this->api_trade_available_flag;
    }

    /**
     *Возможность торговать инструментом через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 409;</code>
     * @param bool $var
     * @return $this
     */
    public function setApiTradeAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->api_trade_available_flag = $var;

        return $this;
    }

}

