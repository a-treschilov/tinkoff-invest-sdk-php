<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: instruments.proto

namespace Tinkoff\Invest\V1\GetAssetFundamentalsResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *Фундаментальные показатели по активу
 *
 * Generated from protobuf message <code>tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse</code>
 */
class StatisticResponse extends \Google\Protobuf\Internal\Message
{
    /**
     *Идентификатор актива
     *
     * Generated from protobuf field <code>string asset_uid = 1;</code>
     */
    protected $asset_uid = '';
    /**
     *Валюта
     *
     * Generated from protobuf field <code>string currency = 2;</code>
     */
    protected $currency = '';
    /**
     *Рыночная капитализация
     *
     * Generated from protobuf field <code>double market_capitalization = 3;</code>
     */
    protected $market_capitalization = 0.0;
    /**
     *Максимум за год
     *
     * Generated from protobuf field <code>double high_price_last_52_weeks = 4;</code>
     */
    protected $high_price_last_52_weeks = 0.0;
    /**
     *Минимум за год
     *
     * Generated from protobuf field <code>double low_price_last_52_weeks = 5;</code>
     */
    protected $low_price_last_52_weeks = 0.0;
    /**
     *Средний объем торгов за 10 дней
     *
     * Generated from protobuf field <code>double average_daily_volume_last_10_days = 6;</code>
     */
    protected $average_daily_volume_last_10_days = 0.0;
    /**
     *Средний объем торгов за месяц
     *
     * Generated from protobuf field <code>double average_daily_volume_last_4_weeks = 7;</code>
     */
    protected $average_daily_volume_last_4_weeks = 0.0;
    /**
     * Generated from protobuf field <code>double beta = 8;</code>
     */
    protected $beta = 0.0;
    /**
     *Доля акций в свободном обращении
     *
     * Generated from protobuf field <code>double free_float = 9;</code>
     */
    protected $free_float = 0.0;
    /**
     *Процент форвардной дивидендной доходности по отношению к цене акций.
     *
     * Generated from protobuf field <code>double forward_annual_dividend_yield = 10;</code>
     */
    protected $forward_annual_dividend_yield = 0.0;
    /**
     *Количество акций в обращении
     *
     * Generated from protobuf field <code>double shares_outstanding = 11;</code>
     */
    protected $shares_outstanding = 0.0;
    /**
     *Выручка
     *
     * Generated from protobuf field <code>double revenue_ttm = 12;</code>
     */
    protected $revenue_ttm = 0.0;
    /**
     *EBITDA Прибыль до вычета процентов, налогов, износа и амортизации
     *
     * Generated from protobuf field <code>double ebitda_ttm = 13;</code>
     */
    protected $ebitda_ttm = 0.0;
    /**
     *Чистая прибыль
     *
     * Generated from protobuf field <code>double net_income_ttm = 14;</code>
     */
    protected $net_income_ttm = 0.0;
    /**
     *EPS Величина чистой прибыли компании, приходящуюся на каждую обыкновенную акцию
     *
     * Generated from protobuf field <code>double eps_ttm = 15;</code>
     */
    protected $eps_ttm = 0.0;
    /**
     *EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции
     *
     * Generated from protobuf field <code>double diluted_eps_ttm = 16;</code>
     */
    protected $diluted_eps_ttm = 0.0;
    /**
     *Свободный денежный поток
     *
     * Generated from protobuf field <code>double free_cash_flow_ttm = 17;</code>
     */
    protected $free_cash_flow_ttm = 0.0;
    /**
     *Среднегодовой  рocт выручки (за 5 лет)
     *
     * Generated from protobuf field <code>double five_year_annual_revenue_growth_rate = 18;</code>
     */
    protected $five_year_annual_revenue_growth_rate = 0.0;
    /**
     *Среднегодовой  рocт выручки (за 3 года)
     *
     * Generated from protobuf field <code>double three_year_annual_revenue_growth_rate = 19;</code>
     */
    protected $three_year_annual_revenue_growth_rate = 0.0;
    /**
     *Показывает соотношение рыночной капитализации компании к ее чистой прибыли
     *
     * Generated from protobuf field <code>double pe_ratio_ttm = 20;</code>
     */
    protected $pe_ratio_ttm = 0.0;
    /**
     *Показывает соотношение рыночной капитализации компании к ее выручке
     *
     * Generated from protobuf field <code>double price_to_sales_ttm = 21;</code>
     */
    protected $price_to_sales_ttm = 0.0;
    /**
     *Показывает соотношение рыночной капитализации компании к ее балансовой стоимости
     *
     * Generated from protobuf field <code>double price_to_book_ttm = 22;</code>
     */
    protected $price_to_book_ttm = 0.0;
    /**
     *Показывает соотношение рыночной капитализации компании к ее свободному денежному потоку
     *
     * Generated from protobuf field <code>double price_to_free_cash_flow_ttm = 23;</code>
     */
    protected $price_to_free_cash_flow_ttm = 0.0;
    /**
     *Рыночная стоимость компании
     *
     * Generated from protobuf field <code>double total_enterprise_value_mrq = 24;</code>
     */
    protected $total_enterprise_value_mrq = 0.0;
    /**
     *Соотношение EV и EBITDA
     *
     * Generated from protobuf field <code>double ev_to_ebitda_mrq = 25;</code>
     */
    protected $ev_to_ebitda_mrq = 0.0;
    /**
     *Маржа чистой прибыли
     *
     * Generated from protobuf field <code>double net_margin_mrq = 26;</code>
     */
    protected $net_margin_mrq = 0.0;
    /**
     *Рентабельность чистой прибыли
     *
     * Generated from protobuf field <code>double net_interest_margin_mrq = 27;</code>
     */
    protected $net_interest_margin_mrq = 0.0;
    /**
     *Рентабельность собственного капитала
     *
     * Generated from protobuf field <code>double roe = 28;</code>
     */
    protected $roe = 0.0;
    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roa = 29;</code>
     */
    protected $roa = 0.0;
    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roic = 30;</code>
     */
    protected $roic = 0.0;
    /**
     *Сумма краткосрочных и долгосрочных обязательств компании
     *
     * Generated from protobuf field <code>double total_debt_mrq = 31;</code>
     */
    protected $total_debt_mrq = 0.0;
    /**
     *Соотношение долга к собственному капиталу
     *
     * Generated from protobuf field <code>double total_debt_to_equity_mrq = 32;</code>
     */
    protected $total_debt_to_equity_mrq = 0.0;
    /**
     *Total Debt/EBITDA
     *
     * Generated from protobuf field <code>double total_debt_to_ebitda_mrq = 33;</code>
     */
    protected $total_debt_to_ebitda_mrq = 0.0;
    /**
     *Отношение свободглго кэша к стоимости
     *
     * Generated from protobuf field <code>double free_cash_flow_to_price = 34;</code>
     */
    protected $free_cash_flow_to_price = 0.0;
    /**
     *Отношение чистого долга к ebitda
     *
     * Generated from protobuf field <code>double net_debt_to_ebitda = 35;</code>
     */
    protected $net_debt_to_ebitda = 0.0;
    /**
     *Коэффициент текущей ликвидности
     *
     * Generated from protobuf field <code>double current_ratio_mrq = 36;</code>
     */
    protected $current_ratio_mrq = 0.0;
    /**
     *Коэффициент покрытия фиксированных платежей (FCCR)
     *
     * Generated from protobuf field <code>double fixed_charge_coverage_ratio_fy = 37;</code>
     */
    protected $fixed_charge_coverage_ratio_fy = 0.0;
    /**
     *Дивидендная доходность за 12 мес
     *
     * Generated from protobuf field <code>double dividend_yield_daily_ttm = 38;</code>
     */
    protected $dividend_yield_daily_ttm = 0.0;
    /**
     *Выплаченные дивиденды за 12 мес.
     *
     * Generated from protobuf field <code>double dividend_rate_ttm = 39;</code>
     */
    protected $dividend_rate_ttm = 0.0;
    /**
     *Значение дивидендов на акцию
     *
     * Generated from protobuf field <code>double dividends_per_share = 40;</code>
     */
    protected $dividends_per_share = 0.0;
    /**
     *Средняя дивидендная доходность за 5 лет
     *
     * Generated from protobuf field <code>double five_years_average_dividend_yield = 41;</code>
     */
    protected $five_years_average_dividend_yield = 0.0;
    /**
     *Среднегодовой рост дивидендов за 5 лет
     *
     * Generated from protobuf field <code>double five_year_annual_dividend_growth_rate = 42;</code>
     */
    protected $five_year_annual_dividend_growth_rate = 0.0;
    /**
     *Процент чистой прибыли, уходящий на выплату дивидендов
     *
     * Generated from protobuf field <code>double dividend_payout_ratio_fy = 43;</code>
     */
    protected $dividend_payout_ratio_fy = 0.0;
    /**
     *Деньги, потраченные на обратный выкуп акций
     *
     * Generated from protobuf field <code>double buy_back_ttm = 44;</code>
     */
    protected $buy_back_ttm = 0.0;
    /**
     *Рост выручки за 1 год
     *
     * Generated from protobuf field <code>double one_year_annual_revenue_growth_rate = 45;</code>
     */
    protected $one_year_annual_revenue_growth_rate = 0.0;
    /**
     *Код страны
     *
     * Generated from protobuf field <code>string domicile_indicator_code = 46;</code>
     */
    protected $domicile_indicator_code = '';
    /**
     *Соотношение депозитарной расписки к акциям
     *
     * Generated from protobuf field <code>double adr_to_common_share_ratio = 47;</code>
     */
    protected $adr_to_common_share_ratio = 0.0;
    /**
     *Количество сотрудников
     *
     * Generated from protobuf field <code>double number_of_employees = 48;</code>
     */
    protected $number_of_employees = 0.0;
    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp ex_dividend_date = 49;</code>
     */
    protected $ex_dividend_date = null;
    /**
     *Начало фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_start_date = 50;</code>
     */
    protected $fiscal_period_start_date = null;
    /**
     *Конец фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_end_date = 51;</code>
     */
    protected $fiscal_period_end_date = null;
    /**
     *Изменение общего дохода за 5 лет
     *
     * Generated from protobuf field <code>double revenue_change_five_years = 53;</code>
     */
    protected $revenue_change_five_years = 0.0;
    /**
     *Изменение eps за 5 лет
     *
     * Generated from protobuf field <code>double eps_change_five_years = 54;</code>
     */
    protected $eps_change_five_years = 0.0;
    /**
     *Изменение ebitda за 5 лет
     *
     * Generated from protobuf field <code>double ebitda_change_five_years = 55;</code>
     */
    protected $ebitda_change_five_years = 0.0;
    /**
     *Изменение общей задолжности за 5 лет
     *
     * Generated from protobuf field <code>double total_debt_change_five_years = 56;</code>
     */
    protected $total_debt_change_five_years = 0.0;
    /**
     *Отношение EV к выручке
     *
     * Generated from protobuf field <code>double ev_to_sales = 57;</code>
     */
    protected $ev_to_sales = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $asset_uid
     *          Идентификатор актива
     *     @type string $currency
     *          Валюта
     *     @type float $market_capitalization
     *          Рыночная капитализация
     *     @type float $high_price_last_52_weeks
     *          Максимум за год
     *     @type float $low_price_last_52_weeks
     *          Минимум за год
     *     @type float $average_daily_volume_last_10_days
     *          Средний объем торгов за 10 дней
     *     @type float $average_daily_volume_last_4_weeks
     *          Средний объем торгов за месяц
     *     @type float $beta
     *     @type float $free_float
     *          Доля акций в свободном обращении
     *     @type float $forward_annual_dividend_yield
     *          Процент форвардной дивидендной доходности по отношению к цене акций.
     *     @type float $shares_outstanding
     *          Количество акций в обращении
     *     @type float $revenue_ttm
     *          Выручка
     *     @type float $ebitda_ttm
     *          EBITDA Прибыль до вычета процентов, налогов, износа и амортизации
     *     @type float $net_income_ttm
     *          Чистая прибыль
     *     @type float $eps_ttm
     *          EPS Величина чистой прибыли компании, приходящуюся на каждую обыкновенную акцию
     *     @type float $diluted_eps_ttm
     *          EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции
     *     @type float $free_cash_flow_ttm
     *          Свободный денежный поток
     *     @type float $five_year_annual_revenue_growth_rate
     *          Среднегодовой  рocт выручки (за 5 лет)
     *     @type float $three_year_annual_revenue_growth_rate
     *          Среднегодовой  рocт выручки (за 3 года)
     *     @type float $pe_ratio_ttm
     *          Показывает соотношение рыночной капитализации компании к ее чистой прибыли
     *     @type float $price_to_sales_ttm
     *          Показывает соотношение рыночной капитализации компании к ее выручке
     *     @type float $price_to_book_ttm
     *          Показывает соотношение рыночной капитализации компании к ее балансовой стоимости
     *     @type float $price_to_free_cash_flow_ttm
     *          Показывает соотношение рыночной капитализации компании к ее свободному денежному потоку
     *     @type float $total_enterprise_value_mrq
     *          Рыночная стоимость компании
     *     @type float $ev_to_ebitda_mrq
     *          Соотношение EV и EBITDA
     *     @type float $net_margin_mrq
     *          Маржа чистой прибыли
     *     @type float $net_interest_margin_mrq
     *          Рентабельность чистой прибыли
     *     @type float $roe
     *          Рентабельность собственного капитала
     *     @type float $roa
     *          Рентабельность активов
     *     @type float $roic
     *          Рентабельность активов
     *     @type float $total_debt_mrq
     *          Сумма краткосрочных и долгосрочных обязательств компании
     *     @type float $total_debt_to_equity_mrq
     *          Соотношение долга к собственному капиталу
     *     @type float $total_debt_to_ebitda_mrq
     *          Total Debt/EBITDA
     *     @type float $free_cash_flow_to_price
     *          Отношение свободглго кэша к стоимости
     *     @type float $net_debt_to_ebitda
     *          Отношение чистого долга к ebitda
     *     @type float $current_ratio_mrq
     *          Коэффициент текущей ликвидности
     *     @type float $fixed_charge_coverage_ratio_fy
     *          Коэффициент покрытия фиксированных платежей (FCCR)
     *     @type float $dividend_yield_daily_ttm
     *          Дивидендная доходность за 12 мес
     *     @type float $dividend_rate_ttm
     *          Выплаченные дивиденды за 12 мес.
     *     @type float $dividends_per_share
     *          Значение дивидендов на акцию
     *     @type float $five_years_average_dividend_yield
     *          Средняя дивидендная доходность за 5 лет
     *     @type float $five_year_annual_dividend_growth_rate
     *          Среднегодовой рост дивидендов за 5 лет
     *     @type float $dividend_payout_ratio_fy
     *          Процент чистой прибыли, уходящий на выплату дивидендов
     *     @type float $buy_back_ttm
     *          Деньги, потраченные на обратный выкуп акций
     *     @type float $one_year_annual_revenue_growth_rate
     *          Рост выручки за 1 год
     *     @type string $domicile_indicator_code
     *          Код страны
     *     @type float $adr_to_common_share_ratio
     *          Соотношение депозитарной расписки к акциям
     *     @type float $number_of_employees
     *          Количество сотрудников
     *     @type \Google\Protobuf\Timestamp $ex_dividend_date
     *     @type \Google\Protobuf\Timestamp $fiscal_period_start_date
     *          Начало фискального периода
     *     @type \Google\Protobuf\Timestamp $fiscal_period_end_date
     *          Конец фискального периода
     *     @type float $revenue_change_five_years
     *          Изменение общего дохода за 5 лет
     *     @type float $eps_change_five_years
     *          Изменение eps за 5 лет
     *     @type float $ebitda_change_five_years
     *          Изменение ebitda за 5 лет
     *     @type float $total_debt_change_five_years
     *          Изменение общей задолжности за 5 лет
     *     @type float $ev_to_sales
     *          Отношение EV к выручке
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Instruments::initOnce();
        parent::__construct($data);
    }

    /**
     *Идентификатор актива
     *
     * Generated from protobuf field <code>string asset_uid = 1;</code>
     * @return string
     */
    public function getAssetUid()
    {
        return $this->asset_uid;
    }

    /**
     *Идентификатор актива
     *
     * Generated from protobuf field <code>string asset_uid = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setAssetUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->asset_uid = $var;

        return $this;
    }

    /**
     *Валюта
     *
     * Generated from protobuf field <code>string currency = 2;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     *Валюта
     *
     * Generated from protobuf field <code>string currency = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     *Рыночная капитализация
     *
     * Generated from protobuf field <code>double market_capitalization = 3;</code>
     * @return float
     */
    public function getMarketCapitalization()
    {
        return $this->market_capitalization;
    }

    /**
     *Рыночная капитализация
     *
     * Generated from protobuf field <code>double market_capitalization = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setMarketCapitalization($var)
    {
        GPBUtil::checkDouble($var);
        $this->market_capitalization = $var;

        return $this;
    }

    /**
     *Максимум за год
     *
     * Generated from protobuf field <code>double high_price_last_52_weeks = 4;</code>
     * @return float
     */
    public function getHighPriceLast52Weeks()
    {
        return $this->high_price_last_52_weeks;
    }

    /**
     *Максимум за год
     *
     * Generated from protobuf field <code>double high_price_last_52_weeks = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setHighPriceLast52Weeks($var)
    {
        GPBUtil::checkDouble($var);
        $this->high_price_last_52_weeks = $var;

        return $this;
    }

    /**
     *Минимум за год
     *
     * Generated from protobuf field <code>double low_price_last_52_weeks = 5;</code>
     * @return float
     */
    public function getLowPriceLast52Weeks()
    {
        return $this->low_price_last_52_weeks;
    }

    /**
     *Минимум за год
     *
     * Generated from protobuf field <code>double low_price_last_52_weeks = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setLowPriceLast52Weeks($var)
    {
        GPBUtil::checkDouble($var);
        $this->low_price_last_52_weeks = $var;

        return $this;
    }

    /**
     *Средний объем торгов за 10 дней
     *
     * Generated from protobuf field <code>double average_daily_volume_last_10_days = 6;</code>
     * @return float
     */
    public function getAverageDailyVolumeLast10Days()
    {
        return $this->average_daily_volume_last_10_days;
    }

    /**
     *Средний объем торгов за 10 дней
     *
     * Generated from protobuf field <code>double average_daily_volume_last_10_days = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageDailyVolumeLast10Days($var)
    {
        GPBUtil::checkDouble($var);
        $this->average_daily_volume_last_10_days = $var;

        return $this;
    }

    /**
     *Средний объем торгов за месяц
     *
     * Generated from protobuf field <code>double average_daily_volume_last_4_weeks = 7;</code>
     * @return float
     */
    public function getAverageDailyVolumeLast4Weeks()
    {
        return $this->average_daily_volume_last_4_weeks;
    }

    /**
     *Средний объем торгов за месяц
     *
     * Generated from protobuf field <code>double average_daily_volume_last_4_weeks = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageDailyVolumeLast4Weeks($var)
    {
        GPBUtil::checkDouble($var);
        $this->average_daily_volume_last_4_weeks = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double beta = 8;</code>
     * @return float
     */
    public function getBeta()
    {
        return $this->beta;
    }

    /**
     * Generated from protobuf field <code>double beta = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setBeta($var)
    {
        GPBUtil::checkDouble($var);
        $this->beta = $var;

        return $this;
    }

    /**
     *Доля акций в свободном обращении
     *
     * Generated from protobuf field <code>double free_float = 9;</code>
     * @return float
     */
    public function getFreeFloat()
    {
        return $this->free_float;
    }

    /**
     *Доля акций в свободном обращении
     *
     * Generated from protobuf field <code>double free_float = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setFreeFloat($var)
    {
        GPBUtil::checkDouble($var);
        $this->free_float = $var;

        return $this;
    }

    /**
     *Процент форвардной дивидендной доходности по отношению к цене акций.
     *
     * Generated from protobuf field <code>double forward_annual_dividend_yield = 10;</code>
     * @return float
     */
    public function getForwardAnnualDividendYield()
    {
        return $this->forward_annual_dividend_yield;
    }

    /**
     *Процент форвардной дивидендной доходности по отношению к цене акций.
     *
     * Generated from protobuf field <code>double forward_annual_dividend_yield = 10;</code>
     * @param float $var
     * @return $this
     */
    public function setForwardAnnualDividendYield($var)
    {
        GPBUtil::checkDouble($var);
        $this->forward_annual_dividend_yield = $var;

        return $this;
    }

    /**
     *Количество акций в обращении
     *
     * Generated from protobuf field <code>double shares_outstanding = 11;</code>
     * @return float
     */
    public function getSharesOutstanding()
    {
        return $this->shares_outstanding;
    }

    /**
     *Количество акций в обращении
     *
     * Generated from protobuf field <code>double shares_outstanding = 11;</code>
     * @param float $var
     * @return $this
     */
    public function setSharesOutstanding($var)
    {
        GPBUtil::checkDouble($var);
        $this->shares_outstanding = $var;

        return $this;
    }

    /**
     *Выручка
     *
     * Generated from protobuf field <code>double revenue_ttm = 12;</code>
     * @return float
     */
    public function getRevenueTtm()
    {
        return $this->revenue_ttm;
    }

    /**
     *Выручка
     *
     * Generated from protobuf field <code>double revenue_ttm = 12;</code>
     * @param float $var
     * @return $this
     */
    public function setRevenueTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->revenue_ttm = $var;

        return $this;
    }

    /**
     *EBITDA Прибыль до вычета процентов, налогов, износа и амортизации
     *
     * Generated from protobuf field <code>double ebitda_ttm = 13;</code>
     * @return float
     */
    public function getEbitdaTtm()
    {
        return $this->ebitda_ttm;
    }

    /**
     *EBITDA Прибыль до вычета процентов, налогов, износа и амортизации
     *
     * Generated from protobuf field <code>double ebitda_ttm = 13;</code>
     * @param float $var
     * @return $this
     */
    public function setEbitdaTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->ebitda_ttm = $var;

        return $this;
    }

    /**
     *Чистая прибыль
     *
     * Generated from protobuf field <code>double net_income_ttm = 14;</code>
     * @return float
     */
    public function getNetIncomeTtm()
    {
        return $this->net_income_ttm;
    }

    /**
     *Чистая прибыль
     *
     * Generated from protobuf field <code>double net_income_ttm = 14;</code>
     * @param float $var
     * @return $this
     */
    public function setNetIncomeTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->net_income_ttm = $var;

        return $this;
    }

    /**
     *EPS Величина чистой прибыли компании, приходящуюся на каждую обыкновенную акцию
     *
     * Generated from protobuf field <code>double eps_ttm = 15;</code>
     * @return float
     */
    public function getEpsTtm()
    {
        return $this->eps_ttm;
    }

    /**
     *EPS Величина чистой прибыли компании, приходящуюся на каждую обыкновенную акцию
     *
     * Generated from protobuf field <code>double eps_ttm = 15;</code>
     * @param float $var
     * @return $this
     */
    public function setEpsTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->eps_ttm = $var;

        return $this;
    }

    /**
     *EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции
     *
     * Generated from protobuf field <code>double diluted_eps_ttm = 16;</code>
     * @return float
     */
    public function getDilutedEpsTtm()
    {
        return $this->diluted_eps_ttm;
    }

    /**
     *EPS компании с допущением, что все конвертируемые ценные бумаги компании были сконвертированы в обыкновенные акции
     *
     * Generated from protobuf field <code>double diluted_eps_ttm = 16;</code>
     * @param float $var
     * @return $this
     */
    public function setDilutedEpsTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->diluted_eps_ttm = $var;

        return $this;
    }

    /**
     *Свободный денежный поток
     *
     * Generated from protobuf field <code>double free_cash_flow_ttm = 17;</code>
     * @return float
     */
    public function getFreeCashFlowTtm()
    {
        return $this->free_cash_flow_ttm;
    }

    /**
     *Свободный денежный поток
     *
     * Generated from protobuf field <code>double free_cash_flow_ttm = 17;</code>
     * @param float $var
     * @return $this
     */
    public function setFreeCashFlowTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->free_cash_flow_ttm = $var;

        return $this;
    }

    /**
     *Среднегодовой  рocт выручки (за 5 лет)
     *
     * Generated from protobuf field <code>double five_year_annual_revenue_growth_rate = 18;</code>
     * @return float
     */
    public function getFiveYearAnnualRevenueGrowthRate()
    {
        return $this->five_year_annual_revenue_growth_rate;
    }

    /**
     *Среднегодовой  рocт выручки (за 5 лет)
     *
     * Generated from protobuf field <code>double five_year_annual_revenue_growth_rate = 18;</code>
     * @param float $var
     * @return $this
     */
    public function setFiveYearAnnualRevenueGrowthRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->five_year_annual_revenue_growth_rate = $var;

        return $this;
    }

    /**
     *Среднегодовой  рocт выручки (за 3 года)
     *
     * Generated from protobuf field <code>double three_year_annual_revenue_growth_rate = 19;</code>
     * @return float
     */
    public function getThreeYearAnnualRevenueGrowthRate()
    {
        return $this->three_year_annual_revenue_growth_rate;
    }

    /**
     *Среднегодовой  рocт выручки (за 3 года)
     *
     * Generated from protobuf field <code>double three_year_annual_revenue_growth_rate = 19;</code>
     * @param float $var
     * @return $this
     */
    public function setThreeYearAnnualRevenueGrowthRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->three_year_annual_revenue_growth_rate = $var;

        return $this;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее чистой прибыли
     *
     * Generated from protobuf field <code>double pe_ratio_ttm = 20;</code>
     * @return float
     */
    public function getPeRatioTtm()
    {
        return $this->pe_ratio_ttm;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее чистой прибыли
     *
     * Generated from protobuf field <code>double pe_ratio_ttm = 20;</code>
     * @param float $var
     * @return $this
     */
    public function setPeRatioTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->pe_ratio_ttm = $var;

        return $this;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее выручке
     *
     * Generated from protobuf field <code>double price_to_sales_ttm = 21;</code>
     * @return float
     */
    public function getPriceToSalesTtm()
    {
        return $this->price_to_sales_ttm;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее выручке
     *
     * Generated from protobuf field <code>double price_to_sales_ttm = 21;</code>
     * @param float $var
     * @return $this
     */
    public function setPriceToSalesTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->price_to_sales_ttm = $var;

        return $this;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее балансовой стоимости
     *
     * Generated from protobuf field <code>double price_to_book_ttm = 22;</code>
     * @return float
     */
    public function getPriceToBookTtm()
    {
        return $this->price_to_book_ttm;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее балансовой стоимости
     *
     * Generated from protobuf field <code>double price_to_book_ttm = 22;</code>
     * @param float $var
     * @return $this
     */
    public function setPriceToBookTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->price_to_book_ttm = $var;

        return $this;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее свободному денежному потоку
     *
     * Generated from protobuf field <code>double price_to_free_cash_flow_ttm = 23;</code>
     * @return float
     */
    public function getPriceToFreeCashFlowTtm()
    {
        return $this->price_to_free_cash_flow_ttm;
    }

    /**
     *Показывает соотношение рыночной капитализации компании к ее свободному денежному потоку
     *
     * Generated from protobuf field <code>double price_to_free_cash_flow_ttm = 23;</code>
     * @param float $var
     * @return $this
     */
    public function setPriceToFreeCashFlowTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->price_to_free_cash_flow_ttm = $var;

        return $this;
    }

    /**
     *Рыночная стоимость компании
     *
     * Generated from protobuf field <code>double total_enterprise_value_mrq = 24;</code>
     * @return float
     */
    public function getTotalEnterpriseValueMrq()
    {
        return $this->total_enterprise_value_mrq;
    }

    /**
     *Рыночная стоимость компании
     *
     * Generated from protobuf field <code>double total_enterprise_value_mrq = 24;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalEnterpriseValueMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->total_enterprise_value_mrq = $var;

        return $this;
    }

    /**
     *Соотношение EV и EBITDA
     *
     * Generated from protobuf field <code>double ev_to_ebitda_mrq = 25;</code>
     * @return float
     */
    public function getEvToEbitdaMrq()
    {
        return $this->ev_to_ebitda_mrq;
    }

    /**
     *Соотношение EV и EBITDA
     *
     * Generated from protobuf field <code>double ev_to_ebitda_mrq = 25;</code>
     * @param float $var
     * @return $this
     */
    public function setEvToEbitdaMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->ev_to_ebitda_mrq = $var;

        return $this;
    }

    /**
     *Маржа чистой прибыли
     *
     * Generated from protobuf field <code>double net_margin_mrq = 26;</code>
     * @return float
     */
    public function getNetMarginMrq()
    {
        return $this->net_margin_mrq;
    }

    /**
     *Маржа чистой прибыли
     *
     * Generated from protobuf field <code>double net_margin_mrq = 26;</code>
     * @param float $var
     * @return $this
     */
    public function setNetMarginMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->net_margin_mrq = $var;

        return $this;
    }

    /**
     *Рентабельность чистой прибыли
     *
     * Generated from protobuf field <code>double net_interest_margin_mrq = 27;</code>
     * @return float
     */
    public function getNetInterestMarginMrq()
    {
        return $this->net_interest_margin_mrq;
    }

    /**
     *Рентабельность чистой прибыли
     *
     * Generated from protobuf field <code>double net_interest_margin_mrq = 27;</code>
     * @param float $var
     * @return $this
     */
    public function setNetInterestMarginMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->net_interest_margin_mrq = $var;

        return $this;
    }

    /**
     *Рентабельность собственного капитала
     *
     * Generated from protobuf field <code>double roe = 28;</code>
     * @return float
     */
    public function getRoe()
    {
        return $this->roe;
    }

    /**
     *Рентабельность собственного капитала
     *
     * Generated from protobuf field <code>double roe = 28;</code>
     * @param float $var
     * @return $this
     */
    public function setRoe($var)
    {
        GPBUtil::checkDouble($var);
        $this->roe = $var;

        return $this;
    }

    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roa = 29;</code>
     * @return float
     */
    public function getRoa()
    {
        return $this->roa;
    }

    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roa = 29;</code>
     * @param float $var
     * @return $this
     */
    public function setRoa($var)
    {
        GPBUtil::checkDouble($var);
        $this->roa = $var;

        return $this;
    }

    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roic = 30;</code>
     * @return float
     */
    public function getRoic()
    {
        return $this->roic;
    }

    /**
     *Рентабельность активов
     *
     * Generated from protobuf field <code>double roic = 30;</code>
     * @param float $var
     * @return $this
     */
    public function setRoic($var)
    {
        GPBUtil::checkDouble($var);
        $this->roic = $var;

        return $this;
    }

    /**
     *Сумма краткосрочных и долгосрочных обязательств компании
     *
     * Generated from protobuf field <code>double total_debt_mrq = 31;</code>
     * @return float
     */
    public function getTotalDebtMrq()
    {
        return $this->total_debt_mrq;
    }

    /**
     *Сумма краткосрочных и долгосрочных обязательств компании
     *
     * Generated from protobuf field <code>double total_debt_mrq = 31;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalDebtMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->total_debt_mrq = $var;

        return $this;
    }

    /**
     *Соотношение долга к собственному капиталу
     *
     * Generated from protobuf field <code>double total_debt_to_equity_mrq = 32;</code>
     * @return float
     */
    public function getTotalDebtToEquityMrq()
    {
        return $this->total_debt_to_equity_mrq;
    }

    /**
     *Соотношение долга к собственному капиталу
     *
     * Generated from protobuf field <code>double total_debt_to_equity_mrq = 32;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalDebtToEquityMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->total_debt_to_equity_mrq = $var;

        return $this;
    }

    /**
     *Total Debt/EBITDA
     *
     * Generated from protobuf field <code>double total_debt_to_ebitda_mrq = 33;</code>
     * @return float
     */
    public function getTotalDebtToEbitdaMrq()
    {
        return $this->total_debt_to_ebitda_mrq;
    }

    /**
     *Total Debt/EBITDA
     *
     * Generated from protobuf field <code>double total_debt_to_ebitda_mrq = 33;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalDebtToEbitdaMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->total_debt_to_ebitda_mrq = $var;

        return $this;
    }

    /**
     *Отношение свободглго кэша к стоимости
     *
     * Generated from protobuf field <code>double free_cash_flow_to_price = 34;</code>
     * @return float
     */
    public function getFreeCashFlowToPrice()
    {
        return $this->free_cash_flow_to_price;
    }

    /**
     *Отношение свободглго кэша к стоимости
     *
     * Generated from protobuf field <code>double free_cash_flow_to_price = 34;</code>
     * @param float $var
     * @return $this
     */
    public function setFreeCashFlowToPrice($var)
    {
        GPBUtil::checkDouble($var);
        $this->free_cash_flow_to_price = $var;

        return $this;
    }

    /**
     *Отношение чистого долга к ebitda
     *
     * Generated from protobuf field <code>double net_debt_to_ebitda = 35;</code>
     * @return float
     */
    public function getNetDebtToEbitda()
    {
        return $this->net_debt_to_ebitda;
    }

    /**
     *Отношение чистого долга к ebitda
     *
     * Generated from protobuf field <code>double net_debt_to_ebitda = 35;</code>
     * @param float $var
     * @return $this
     */
    public function setNetDebtToEbitda($var)
    {
        GPBUtil::checkDouble($var);
        $this->net_debt_to_ebitda = $var;

        return $this;
    }

    /**
     *Коэффициент текущей ликвидности
     *
     * Generated from protobuf field <code>double current_ratio_mrq = 36;</code>
     * @return float
     */
    public function getCurrentRatioMrq()
    {
        return $this->current_ratio_mrq;
    }

    /**
     *Коэффициент текущей ликвидности
     *
     * Generated from protobuf field <code>double current_ratio_mrq = 36;</code>
     * @param float $var
     * @return $this
     */
    public function setCurrentRatioMrq($var)
    {
        GPBUtil::checkDouble($var);
        $this->current_ratio_mrq = $var;

        return $this;
    }

    /**
     *Коэффициент покрытия фиксированных платежей (FCCR)
     *
     * Generated from protobuf field <code>double fixed_charge_coverage_ratio_fy = 37;</code>
     * @return float
     */
    public function getFixedChargeCoverageRatioFy()
    {
        return $this->fixed_charge_coverage_ratio_fy;
    }

    /**
     *Коэффициент покрытия фиксированных платежей (FCCR)
     *
     * Generated from protobuf field <code>double fixed_charge_coverage_ratio_fy = 37;</code>
     * @param float $var
     * @return $this
     */
    public function setFixedChargeCoverageRatioFy($var)
    {
        GPBUtil::checkDouble($var);
        $this->fixed_charge_coverage_ratio_fy = $var;

        return $this;
    }

    /**
     *Дивидендная доходность за 12 мес
     *
     * Generated from protobuf field <code>double dividend_yield_daily_ttm = 38;</code>
     * @return float
     */
    public function getDividendYieldDailyTtm()
    {
        return $this->dividend_yield_daily_ttm;
    }

    /**
     *Дивидендная доходность за 12 мес
     *
     * Generated from protobuf field <code>double dividend_yield_daily_ttm = 38;</code>
     * @param float $var
     * @return $this
     */
    public function setDividendYieldDailyTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->dividend_yield_daily_ttm = $var;

        return $this;
    }

    /**
     *Выплаченные дивиденды за 12 мес.
     *
     * Generated from protobuf field <code>double dividend_rate_ttm = 39;</code>
     * @return float
     */
    public function getDividendRateTtm()
    {
        return $this->dividend_rate_ttm;
    }

    /**
     *Выплаченные дивиденды за 12 мес.
     *
     * Generated from protobuf field <code>double dividend_rate_ttm = 39;</code>
     * @param float $var
     * @return $this
     */
    public function setDividendRateTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->dividend_rate_ttm = $var;

        return $this;
    }

    /**
     *Значение дивидендов на акцию
     *
     * Generated from protobuf field <code>double dividends_per_share = 40;</code>
     * @return float
     */
    public function getDividendsPerShare()
    {
        return $this->dividends_per_share;
    }

    /**
     *Значение дивидендов на акцию
     *
     * Generated from protobuf field <code>double dividends_per_share = 40;</code>
     * @param float $var
     * @return $this
     */
    public function setDividendsPerShare($var)
    {
        GPBUtil::checkDouble($var);
        $this->dividends_per_share = $var;

        return $this;
    }

    /**
     *Средняя дивидендная доходность за 5 лет
     *
     * Generated from protobuf field <code>double five_years_average_dividend_yield = 41;</code>
     * @return float
     */
    public function getFiveYearsAverageDividendYield()
    {
        return $this->five_years_average_dividend_yield;
    }

    /**
     *Средняя дивидендная доходность за 5 лет
     *
     * Generated from protobuf field <code>double five_years_average_dividend_yield = 41;</code>
     * @param float $var
     * @return $this
     */
    public function setFiveYearsAverageDividendYield($var)
    {
        GPBUtil::checkDouble($var);
        $this->five_years_average_dividend_yield = $var;

        return $this;
    }

    /**
     *Среднегодовой рост дивидендов за 5 лет
     *
     * Generated from protobuf field <code>double five_year_annual_dividend_growth_rate = 42;</code>
     * @return float
     */
    public function getFiveYearAnnualDividendGrowthRate()
    {
        return $this->five_year_annual_dividend_growth_rate;
    }

    /**
     *Среднегодовой рост дивидендов за 5 лет
     *
     * Generated from protobuf field <code>double five_year_annual_dividend_growth_rate = 42;</code>
     * @param float $var
     * @return $this
     */
    public function setFiveYearAnnualDividendGrowthRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->five_year_annual_dividend_growth_rate = $var;

        return $this;
    }

    /**
     *Процент чистой прибыли, уходящий на выплату дивидендов
     *
     * Generated from protobuf field <code>double dividend_payout_ratio_fy = 43;</code>
     * @return float
     */
    public function getDividendPayoutRatioFy()
    {
        return $this->dividend_payout_ratio_fy;
    }

    /**
     *Процент чистой прибыли, уходящий на выплату дивидендов
     *
     * Generated from protobuf field <code>double dividend_payout_ratio_fy = 43;</code>
     * @param float $var
     * @return $this
     */
    public function setDividendPayoutRatioFy($var)
    {
        GPBUtil::checkDouble($var);
        $this->dividend_payout_ratio_fy = $var;

        return $this;
    }

    /**
     *Деньги, потраченные на обратный выкуп акций
     *
     * Generated from protobuf field <code>double buy_back_ttm = 44;</code>
     * @return float
     */
    public function getBuyBackTtm()
    {
        return $this->buy_back_ttm;
    }

    /**
     *Деньги, потраченные на обратный выкуп акций
     *
     * Generated from protobuf field <code>double buy_back_ttm = 44;</code>
     * @param float $var
     * @return $this
     */
    public function setBuyBackTtm($var)
    {
        GPBUtil::checkDouble($var);
        $this->buy_back_ttm = $var;

        return $this;
    }

    /**
     *Рост выручки за 1 год
     *
     * Generated from protobuf field <code>double one_year_annual_revenue_growth_rate = 45;</code>
     * @return float
     */
    public function getOneYearAnnualRevenueGrowthRate()
    {
        return $this->one_year_annual_revenue_growth_rate;
    }

    /**
     *Рост выручки за 1 год
     *
     * Generated from protobuf field <code>double one_year_annual_revenue_growth_rate = 45;</code>
     * @param float $var
     * @return $this
     */
    public function setOneYearAnnualRevenueGrowthRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->one_year_annual_revenue_growth_rate = $var;

        return $this;
    }

    /**
     *Код страны
     *
     * Generated from protobuf field <code>string domicile_indicator_code = 46;</code>
     * @return string
     */
    public function getDomicileIndicatorCode()
    {
        return $this->domicile_indicator_code;
    }

    /**
     *Код страны
     *
     * Generated from protobuf field <code>string domicile_indicator_code = 46;</code>
     * @param string $var
     * @return $this
     */
    public function setDomicileIndicatorCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->domicile_indicator_code = $var;

        return $this;
    }

    /**
     *Соотношение депозитарной расписки к акциям
     *
     * Generated from protobuf field <code>double adr_to_common_share_ratio = 47;</code>
     * @return float
     */
    public function getAdrToCommonShareRatio()
    {
        return $this->adr_to_common_share_ratio;
    }

    /**
     *Соотношение депозитарной расписки к акциям
     *
     * Generated from protobuf field <code>double adr_to_common_share_ratio = 47;</code>
     * @param float $var
     * @return $this
     */
    public function setAdrToCommonShareRatio($var)
    {
        GPBUtil::checkDouble($var);
        $this->adr_to_common_share_ratio = $var;

        return $this;
    }

    /**
     *Количество сотрудников
     *
     * Generated from protobuf field <code>double number_of_employees = 48;</code>
     * @return float
     */
    public function getNumberOfEmployees()
    {
        return $this->number_of_employees;
    }

    /**
     *Количество сотрудников
     *
     * Generated from protobuf field <code>double number_of_employees = 48;</code>
     * @param float $var
     * @return $this
     */
    public function setNumberOfEmployees($var)
    {
        GPBUtil::checkDouble($var);
        $this->number_of_employees = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp ex_dividend_date = 49;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getExDividendDate()
    {
        return $this->ex_dividend_date;
    }

    public function hasExDividendDate()
    {
        return isset($this->ex_dividend_date);
    }

    public function clearExDividendDate()
    {
        unset($this->ex_dividend_date);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp ex_dividend_date = 49;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExDividendDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->ex_dividend_date = $var;

        return $this;
    }

    /**
     *Начало фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_start_date = 50;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFiscalPeriodStartDate()
    {
        return $this->fiscal_period_start_date;
    }

    public function hasFiscalPeriodStartDate()
    {
        return isset($this->fiscal_period_start_date);
    }

    public function clearFiscalPeriodStartDate()
    {
        unset($this->fiscal_period_start_date);
    }

    /**
     *Начало фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_start_date = 50;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFiscalPeriodStartDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->fiscal_period_start_date = $var;

        return $this;
    }

    /**
     *Конец фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_end_date = 51;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFiscalPeriodEndDate()
    {
        return $this->fiscal_period_end_date;
    }

    public function hasFiscalPeriodEndDate()
    {
        return isset($this->fiscal_period_end_date);
    }

    public function clearFiscalPeriodEndDate()
    {
        unset($this->fiscal_period_end_date);
    }

    /**
     *Конец фискального периода
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp fiscal_period_end_date = 51;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFiscalPeriodEndDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->fiscal_period_end_date = $var;

        return $this;
    }

    /**
     *Изменение общего дохода за 5 лет
     *
     * Generated from protobuf field <code>double revenue_change_five_years = 53;</code>
     * @return float
     */
    public function getRevenueChangeFiveYears()
    {
        return $this->revenue_change_five_years;
    }

    /**
     *Изменение общего дохода за 5 лет
     *
     * Generated from protobuf field <code>double revenue_change_five_years = 53;</code>
     * @param float $var
     * @return $this
     */
    public function setRevenueChangeFiveYears($var)
    {
        GPBUtil::checkDouble($var);
        $this->revenue_change_five_years = $var;

        return $this;
    }

    /**
     *Изменение eps за 5 лет
     *
     * Generated from protobuf field <code>double eps_change_five_years = 54;</code>
     * @return float
     */
    public function getEpsChangeFiveYears()
    {
        return $this->eps_change_five_years;
    }

    /**
     *Изменение eps за 5 лет
     *
     * Generated from protobuf field <code>double eps_change_five_years = 54;</code>
     * @param float $var
     * @return $this
     */
    public function setEpsChangeFiveYears($var)
    {
        GPBUtil::checkDouble($var);
        $this->eps_change_five_years = $var;

        return $this;
    }

    /**
     *Изменение ebitda за 5 лет
     *
     * Generated from protobuf field <code>double ebitda_change_five_years = 55;</code>
     * @return float
     */
    public function getEbitdaChangeFiveYears()
    {
        return $this->ebitda_change_five_years;
    }

    /**
     *Изменение ebitda за 5 лет
     *
     * Generated from protobuf field <code>double ebitda_change_five_years = 55;</code>
     * @param float $var
     * @return $this
     */
    public function setEbitdaChangeFiveYears($var)
    {
        GPBUtil::checkDouble($var);
        $this->ebitda_change_five_years = $var;

        return $this;
    }

    /**
     *Изменение общей задолжности за 5 лет
     *
     * Generated from protobuf field <code>double total_debt_change_five_years = 56;</code>
     * @return float
     */
    public function getTotalDebtChangeFiveYears()
    {
        return $this->total_debt_change_five_years;
    }

    /**
     *Изменение общей задолжности за 5 лет
     *
     * Generated from protobuf field <code>double total_debt_change_five_years = 56;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalDebtChangeFiveYears($var)
    {
        GPBUtil::checkDouble($var);
        $this->total_debt_change_five_years = $var;

        return $this;
    }

    /**
     *Отношение EV к выручке
     *
     * Generated from protobuf field <code>double ev_to_sales = 57;</code>
     * @return float
     */
    public function getEvToSales()
    {
        return $this->ev_to_sales;
    }

    /**
     *Отношение EV к выручке
     *
     * Generated from protobuf field <code>double ev_to_sales = 57;</code>
     * @param float $var
     * @return $this
     */
    public function setEvToSales($var)
    {
        GPBUtil::checkDouble($var);
        $this->ev_to_sales = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(StatisticResponse::class, \Tinkoff\Invest\V1\GetAssetFundamentalsResponse_StatisticResponse::class);

