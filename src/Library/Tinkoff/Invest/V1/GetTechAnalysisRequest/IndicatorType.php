<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: marketdata.proto

namespace Tinkoff\Invest\V1\GetTechAnalysisRequest;

use UnexpectedValueException;

/**
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType</code>
 */
class IndicatorType
{
    /**
     *Не определен.
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_UNSPECIFIED = 0;</code>
     */
    const INDICATOR_TYPE_UNSPECIFIED = 0;
    /**
     *Bollinger Bands (Линия Боллинжера).
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_BB = 1;</code>
     */
    const INDICATOR_TYPE_BB = 1;
    /**
     *Exponential Moving Average (EMA, Экспоненциальная скользящая средняя).
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_EMA = 2;</code>
     */
    const INDICATOR_TYPE_EMA = 2;
    /**
     *Relative Strength Index (Индекс относительной силы).
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_RSI = 3;</code>
     */
    const INDICATOR_TYPE_RSI = 3;
    /**
     *Moving Average Convergence/Divergence (Схождение/Расхождение скользящих средних).
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_MACD = 4;</code>
     */
    const INDICATOR_TYPE_MACD = 4;
    /**
     *Simple Moving Average (Простое скользящее среднее).
     *
     * Generated from protobuf enum <code>INDICATOR_TYPE_SMA = 5;</code>
     */
    const INDICATOR_TYPE_SMA = 5;

    private static $valueToName = [
        self::INDICATOR_TYPE_UNSPECIFIED => 'INDICATOR_TYPE_UNSPECIFIED',
        self::INDICATOR_TYPE_BB => 'INDICATOR_TYPE_BB',
        self::INDICATOR_TYPE_EMA => 'INDICATOR_TYPE_EMA',
        self::INDICATOR_TYPE_RSI => 'INDICATOR_TYPE_RSI',
        self::INDICATOR_TYPE_MACD => 'INDICATOR_TYPE_MACD',
        self::INDICATOR_TYPE_SMA => 'INDICATOR_TYPE_SMA',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(IndicatorType::class, \Tinkoff\Invest\V1\GetTechAnalysisRequest_IndicatorType::class);

