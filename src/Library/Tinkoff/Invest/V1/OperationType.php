<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: operations.proto

namespace Tinkoff\Invest\V1;

use UnexpectedValueException;

/**
 *Тип операции.
 *
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.OperationType</code>
 */
class OperationType
{
    /**
     *Тип операции не определён.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_UNSPECIFIED = 0;</code>
     */
    const OPERATION_TYPE_UNSPECIFIED = 0;
    /**
     *Пополнение брокерского счёта.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_INPUT = 1;</code>
     */
    const OPERATION_TYPE_INPUT = 1;
    /**
     *Удержание НДФЛ по купонам.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BOND_TAX = 2;</code>
     */
    const OPERATION_TYPE_BOND_TAX = 2;
    /**
     *Вывод ЦБ.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUTPUT_SECURITIES = 3;</code>
     */
    const OPERATION_TYPE_OUTPUT_SECURITIES = 3;
    /**
     *Доход по сделке РЕПО овернайт.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OVERNIGHT = 4;</code>
     */
    const OPERATION_TYPE_OVERNIGHT = 4;
    /**
     *Удержание налога.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX = 5;</code>
     */
    const OPERATION_TYPE_TAX = 5;
    /**
     *Полное погашение облигаций.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BOND_REPAYMENT_FULL = 6;</code>
     */
    const OPERATION_TYPE_BOND_REPAYMENT_FULL = 6;
    /**
     *Продажа ЦБ с карты.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_SELL_CARD = 7;</code>
     */
    const OPERATION_TYPE_SELL_CARD = 7;
    /**
     *Удержание налога по дивидендам.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DIVIDEND_TAX = 8;</code>
     */
    const OPERATION_TYPE_DIVIDEND_TAX = 8;
    /**
     *Вывод денежных средств.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUTPUT = 9;</code>
     */
    const OPERATION_TYPE_OUTPUT = 9;
    /**
     *Частичное погашение облигаций.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BOND_REPAYMENT = 10;</code>
     */
    const OPERATION_TYPE_BOND_REPAYMENT = 10;
    /**
     *Корректировка налога.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_CORRECTION = 11;</code>
     */
    const OPERATION_TYPE_TAX_CORRECTION = 11;
    /**
     *Удержание комиссии за обслуживание брокерского счёта.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_SERVICE_FEE = 12;</code>
     */
    const OPERATION_TYPE_SERVICE_FEE = 12;
    /**
     *Удержание налога за материальную выгоду.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BENEFIT_TAX = 13;</code>
     */
    const OPERATION_TYPE_BENEFIT_TAX = 13;
    /**
     *Удержание комиссии за непокрытую позицию.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_MARGIN_FEE = 14;</code>
     */
    const OPERATION_TYPE_MARGIN_FEE = 14;
    /**
     *Покупка ЦБ.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BUY = 15;</code>
     */
    const OPERATION_TYPE_BUY = 15;
    /**
     *Покупка ЦБ с карты.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BUY_CARD = 16;</code>
     */
    const OPERATION_TYPE_BUY_CARD = 16;
    /**
     *Перевод ценных бумаг из другого депозитария.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_INPUT_SECURITIES = 17;</code>
     */
    const OPERATION_TYPE_INPUT_SECURITIES = 17;
    /**
     *Продажа в результате Margin-call.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_SELL_MARGIN = 18;</code>
     */
    const OPERATION_TYPE_SELL_MARGIN = 18;
    /**
     *Удержание комиссии за операцию.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BROKER_FEE = 19;</code>
     */
    const OPERATION_TYPE_BROKER_FEE = 19;
    /**
     *Покупка в результате Margin-call.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BUY_MARGIN = 20;</code>
     */
    const OPERATION_TYPE_BUY_MARGIN = 20;
    /**
     *Выплата дивидендов.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DIVIDEND = 21;</code>
     */
    const OPERATION_TYPE_DIVIDEND = 21;
    /**
     *Продажа ЦБ.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_SELL = 22;</code>
     */
    const OPERATION_TYPE_SELL = 22;
    /**
     *Выплата купонов.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_COUPON = 23;</code>
     */
    const OPERATION_TYPE_COUPON = 23;
    /**
     *Удержание комиссии SuccessFee.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_SUCCESS_FEE = 24;</code>
     */
    const OPERATION_TYPE_SUCCESS_FEE = 24;
    /**
     *Передача дивидендного дохода.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DIVIDEND_TRANSFER = 25;</code>
     */
    const OPERATION_TYPE_DIVIDEND_TRANSFER = 25;
    /**
     *Зачисление вариационной маржи.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_ACCRUING_VARMARGIN = 26;</code>
     */
    const OPERATION_TYPE_ACCRUING_VARMARGIN = 26;
    /**
     *Списание вариационной маржи.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_WRITING_OFF_VARMARGIN = 27;</code>
     */
    const OPERATION_TYPE_WRITING_OFF_VARMARGIN = 27;
    /**
     *Покупка в рамках экспирации фьючерсного контракта.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DELIVERY_BUY = 28;</code>
     */
    const OPERATION_TYPE_DELIVERY_BUY = 28;
    /**
     *Продажа в рамках экспирации фьючерсного контракта.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DELIVERY_SELL = 29;</code>
     */
    const OPERATION_TYPE_DELIVERY_SELL = 29;
    /**
     *Комиссия за управление по счёту автоследования.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TRACK_MFEE = 30;</code>
     */
    const OPERATION_TYPE_TRACK_MFEE = 30;
    /**
     *Комиссия за результат по счёту автоследования.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TRACK_PFEE = 31;</code>
     */
    const OPERATION_TYPE_TRACK_PFEE = 31;
    /**
     *Удержание налога по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_PROGRESSIVE = 32;</code>
     */
    const OPERATION_TYPE_TAX_PROGRESSIVE = 32;
    /**
     *Удержание налога по купонам по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BOND_TAX_PROGRESSIVE = 33;</code>
     */
    const OPERATION_TYPE_BOND_TAX_PROGRESSIVE = 33;
    /**
     *Удержание налога по дивидендам по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE = 34;</code>
     */
    const OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE = 34;
    /**
     *Удержание налога за материальную выгоду по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE = 35;</code>
     */
    const OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE = 35;
    /**
     *Корректировка налога по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE = 36;</code>
     */
    const OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE = 36;
    /**
     *Удержание налога за возмещение по сделкам РЕПО по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO_PROGRESSIVE = 37;</code>
     */
    const OPERATION_TYPE_TAX_REPO_PROGRESSIVE = 37;
    /**
     *Удержание налога за возмещение по сделкам РЕПО.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO = 38;</code>
     */
    const OPERATION_TYPE_TAX_REPO = 38;
    /**
     *Удержание налога по сделкам РЕПО.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO_HOLD = 39;</code>
     */
    const OPERATION_TYPE_TAX_REPO_HOLD = 39;
    /**
     *Возврат налога по сделкам РЕПО.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO_REFUND = 40;</code>
     */
    const OPERATION_TYPE_TAX_REPO_REFUND = 40;
    /**
     *Удержание налога по сделкам РЕПО по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE = 41;</code>
     */
    const OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE = 41;
    /**
     *Возврат налога по сделкам РЕПО по ставке 15%.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE = 42;</code>
     */
    const OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE = 42;
    /**
     *Выплата дивидендов на карту.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_DIV_EXT = 43;</code>
     */
    const OPERATION_TYPE_DIV_EXT = 43;
    /**
     *Корректировка налога по купонам.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TAX_CORRECTION_COUPON = 44;</code>
     */
    const OPERATION_TYPE_TAX_CORRECTION_COUPON = 44;
    /**
     *Комиссия за валютный остаток.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_CASH_FEE = 45;</code>
     */
    const OPERATION_TYPE_CASH_FEE = 45;
    /**
     *Комиссия за вывод валюты с брокерского счета.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUT_FEE = 46;</code>
     */
    const OPERATION_TYPE_OUT_FEE = 46;
    /**
     *Гербовый сбор.
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUT_STAMP_DUTY = 47;</code>
     */
    const OPERATION_TYPE_OUT_STAMP_DUTY = 47;
    /**
     *	SWIFT-перевод
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUTPUT_SWIFT = 50;</code>
     */
    const OPERATION_TYPE_OUTPUT_SWIFT = 50;
    /**
     *	SWIFT-перевод
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_INPUT_SWIFT = 51;</code>
     */
    const OPERATION_TYPE_INPUT_SWIFT = 51;
    /**
     *  Перевод на карту
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUTPUT_ACQUIRING = 53;</code>
     */
    const OPERATION_TYPE_OUTPUT_ACQUIRING = 53;
    /**
     *	Перевод с карты
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_INPUT_ACQUIRING = 54;</code>
     */
    const OPERATION_TYPE_INPUT_ACQUIRING = 54;
    /**
     *	Комиссия за вывод средств
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUTPUT_PENALTY = 55;</code>
     */
    const OPERATION_TYPE_OUTPUT_PENALTY = 55;
    /**
     *	Списание оплаты за сервис Советов
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_ADVICE_FEE = 56;</code>
     */
    const OPERATION_TYPE_ADVICE_FEE = 56;
    /**
     *  Перевод ценных бумаг с ИИС на Брокерский счет
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TRANS_IIS_BS = 57;</code>
     */
    const OPERATION_TYPE_TRANS_IIS_BS = 57;
    /**
     *  Перевод ценных бумаг с одного брокерского счета на другой
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_TRANS_BS_BS = 58;</code>
     */
    const OPERATION_TYPE_TRANS_BS_BS = 58;
    /**
     *  Вывод денежных средств со счета
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OUT_MULTI = 59;</code>
     */
    const OPERATION_TYPE_OUT_MULTI = 59;
    /**
     *  Пополнение денежных средств со счета
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_INP_MULTI = 60;</code>
     */
    const OPERATION_TYPE_INP_MULTI = 60;
    /**
     *  Размещение биржевого овернайта
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OVER_PLACEMENT = 61;</code>
     */
    const OPERATION_TYPE_OVER_PLACEMENT = 61;
    /**
     *  Списание комиссии
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OVER_COM = 62;</code>
     */
    const OPERATION_TYPE_OVER_COM = 62;
    /**
     *  Доход от оверанайта
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OVER_INCOME = 63;</code>
     */
    const OPERATION_TYPE_OVER_INCOME = 63;
    /**
     * Экспирация
     *
     * Generated from protobuf enum <code>OPERATION_TYPE_OPTION_EXPIRATION = 64;</code>
     */
    const OPERATION_TYPE_OPTION_EXPIRATION = 64;

    private static $valueToName = [
        self::OPERATION_TYPE_UNSPECIFIED => 'OPERATION_TYPE_UNSPECIFIED',
        self::OPERATION_TYPE_INPUT => 'OPERATION_TYPE_INPUT',
        self::OPERATION_TYPE_BOND_TAX => 'OPERATION_TYPE_BOND_TAX',
        self::OPERATION_TYPE_OUTPUT_SECURITIES => 'OPERATION_TYPE_OUTPUT_SECURITIES',
        self::OPERATION_TYPE_OVERNIGHT => 'OPERATION_TYPE_OVERNIGHT',
        self::OPERATION_TYPE_TAX => 'OPERATION_TYPE_TAX',
        self::OPERATION_TYPE_BOND_REPAYMENT_FULL => 'OPERATION_TYPE_BOND_REPAYMENT_FULL',
        self::OPERATION_TYPE_SELL_CARD => 'OPERATION_TYPE_SELL_CARD',
        self::OPERATION_TYPE_DIVIDEND_TAX => 'OPERATION_TYPE_DIVIDEND_TAX',
        self::OPERATION_TYPE_OUTPUT => 'OPERATION_TYPE_OUTPUT',
        self::OPERATION_TYPE_BOND_REPAYMENT => 'OPERATION_TYPE_BOND_REPAYMENT',
        self::OPERATION_TYPE_TAX_CORRECTION => 'OPERATION_TYPE_TAX_CORRECTION',
        self::OPERATION_TYPE_SERVICE_FEE => 'OPERATION_TYPE_SERVICE_FEE',
        self::OPERATION_TYPE_BENEFIT_TAX => 'OPERATION_TYPE_BENEFIT_TAX',
        self::OPERATION_TYPE_MARGIN_FEE => 'OPERATION_TYPE_MARGIN_FEE',
        self::OPERATION_TYPE_BUY => 'OPERATION_TYPE_BUY',
        self::OPERATION_TYPE_BUY_CARD => 'OPERATION_TYPE_BUY_CARD',
        self::OPERATION_TYPE_INPUT_SECURITIES => 'OPERATION_TYPE_INPUT_SECURITIES',
        self::OPERATION_TYPE_SELL_MARGIN => 'OPERATION_TYPE_SELL_MARGIN',
        self::OPERATION_TYPE_BROKER_FEE => 'OPERATION_TYPE_BROKER_FEE',
        self::OPERATION_TYPE_BUY_MARGIN => 'OPERATION_TYPE_BUY_MARGIN',
        self::OPERATION_TYPE_DIVIDEND => 'OPERATION_TYPE_DIVIDEND',
        self::OPERATION_TYPE_SELL => 'OPERATION_TYPE_SELL',
        self::OPERATION_TYPE_COUPON => 'OPERATION_TYPE_COUPON',
        self::OPERATION_TYPE_SUCCESS_FEE => 'OPERATION_TYPE_SUCCESS_FEE',
        self::OPERATION_TYPE_DIVIDEND_TRANSFER => 'OPERATION_TYPE_DIVIDEND_TRANSFER',
        self::OPERATION_TYPE_ACCRUING_VARMARGIN => 'OPERATION_TYPE_ACCRUING_VARMARGIN',
        self::OPERATION_TYPE_WRITING_OFF_VARMARGIN => 'OPERATION_TYPE_WRITING_OFF_VARMARGIN',
        self::OPERATION_TYPE_DELIVERY_BUY => 'OPERATION_TYPE_DELIVERY_BUY',
        self::OPERATION_TYPE_DELIVERY_SELL => 'OPERATION_TYPE_DELIVERY_SELL',
        self::OPERATION_TYPE_TRACK_MFEE => 'OPERATION_TYPE_TRACK_MFEE',
        self::OPERATION_TYPE_TRACK_PFEE => 'OPERATION_TYPE_TRACK_PFEE',
        self::OPERATION_TYPE_TAX_PROGRESSIVE => 'OPERATION_TYPE_TAX_PROGRESSIVE',
        self::OPERATION_TYPE_BOND_TAX_PROGRESSIVE => 'OPERATION_TYPE_BOND_TAX_PROGRESSIVE',
        self::OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE => 'OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE',
        self::OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE => 'OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE',
        self::OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE => 'OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE',
        self::OPERATION_TYPE_TAX_REPO_PROGRESSIVE => 'OPERATION_TYPE_TAX_REPO_PROGRESSIVE',
        self::OPERATION_TYPE_TAX_REPO => 'OPERATION_TYPE_TAX_REPO',
        self::OPERATION_TYPE_TAX_REPO_HOLD => 'OPERATION_TYPE_TAX_REPO_HOLD',
        self::OPERATION_TYPE_TAX_REPO_REFUND => 'OPERATION_TYPE_TAX_REPO_REFUND',
        self::OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE => 'OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE',
        self::OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE => 'OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE',
        self::OPERATION_TYPE_DIV_EXT => 'OPERATION_TYPE_DIV_EXT',
        self::OPERATION_TYPE_TAX_CORRECTION_COUPON => 'OPERATION_TYPE_TAX_CORRECTION_COUPON',
        self::OPERATION_TYPE_CASH_FEE => 'OPERATION_TYPE_CASH_FEE',
        self::OPERATION_TYPE_OUT_FEE => 'OPERATION_TYPE_OUT_FEE',
        self::OPERATION_TYPE_OUT_STAMP_DUTY => 'OPERATION_TYPE_OUT_STAMP_DUTY',
        self::OPERATION_TYPE_OUTPUT_SWIFT => 'OPERATION_TYPE_OUTPUT_SWIFT',
        self::OPERATION_TYPE_INPUT_SWIFT => 'OPERATION_TYPE_INPUT_SWIFT',
        self::OPERATION_TYPE_OUTPUT_ACQUIRING => 'OPERATION_TYPE_OUTPUT_ACQUIRING',
        self::OPERATION_TYPE_INPUT_ACQUIRING => 'OPERATION_TYPE_INPUT_ACQUIRING',
        self::OPERATION_TYPE_OUTPUT_PENALTY => 'OPERATION_TYPE_OUTPUT_PENALTY',
        self::OPERATION_TYPE_ADVICE_FEE => 'OPERATION_TYPE_ADVICE_FEE',
        self::OPERATION_TYPE_TRANS_IIS_BS => 'OPERATION_TYPE_TRANS_IIS_BS',
        self::OPERATION_TYPE_TRANS_BS_BS => 'OPERATION_TYPE_TRANS_BS_BS',
        self::OPERATION_TYPE_OUT_MULTI => 'OPERATION_TYPE_OUT_MULTI',
        self::OPERATION_TYPE_INP_MULTI => 'OPERATION_TYPE_INP_MULTI',
        self::OPERATION_TYPE_OVER_PLACEMENT => 'OPERATION_TYPE_OVER_PLACEMENT',
        self::OPERATION_TYPE_OVER_COM => 'OPERATION_TYPE_OVER_COM',
        self::OPERATION_TYPE_OVER_INCOME => 'OPERATION_TYPE_OVER_INCOME',
        self::OPERATION_TYPE_OPTION_EXPIRATION => 'OPERATION_TYPE_OPTION_EXPIRATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

