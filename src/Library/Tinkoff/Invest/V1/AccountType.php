<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: users.proto

namespace Tinkoff\Invest\V1;

use UnexpectedValueException;

/**
 *Тип счёта.
 *
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.AccountType</code>
 */
class AccountType
{
    /**
     *Тип аккаунта не определён.
     *
     * Generated from protobuf enum <code>ACCOUNT_TYPE_UNSPECIFIED = 0;</code>
     */
    const ACCOUNT_TYPE_UNSPECIFIED = 0;
    /**
     *Брокерский счёт Т-Инвестиций.
     *
     * Generated from protobuf enum <code>ACCOUNT_TYPE_TINKOFF = 1;</code>
     */
    const ACCOUNT_TYPE_TINKOFF = 1;
    /**
     *ИИС.
     *
     * Generated from protobuf enum <code>ACCOUNT_TYPE_TINKOFF_IIS = 2;</code>
     */
    const ACCOUNT_TYPE_TINKOFF_IIS = 2;
    /**
     *Инвесткопилка.
     *
     * Generated from protobuf enum <code>ACCOUNT_TYPE_INVEST_BOX = 3;</code>
     */
    const ACCOUNT_TYPE_INVEST_BOX = 3;
    /**
     *Фонд денежного рынка.
     *
     * Generated from protobuf enum <code>ACCOUNT_TYPE_INVEST_FUND = 4;</code>
     */
    const ACCOUNT_TYPE_INVEST_FUND = 4;

    private static $valueToName = [
        self::ACCOUNT_TYPE_UNSPECIFIED => 'ACCOUNT_TYPE_UNSPECIFIED',
        self::ACCOUNT_TYPE_TINKOFF => 'ACCOUNT_TYPE_TINKOFF',
        self::ACCOUNT_TYPE_TINKOFF_IIS => 'ACCOUNT_TYPE_TINKOFF_IIS',
        self::ACCOUNT_TYPE_INVEST_BOX => 'ACCOUNT_TYPE_INVEST_BOX',
        self::ACCOUNT_TYPE_INVEST_FUND => 'ACCOUNT_TYPE_INVEST_FUND',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

